// Generated by CoffeeScript 1.4.0
(function() {

  describe('TimeParser', function() {
    beforeEach(function() {
      return this.parser = new TimeParser();
    });
    describe('from_minutes', function() {
      describe('default format', function() {
        it('should do less than an hour', function() {
          return expect(this.parser.from_minutes(40)).toEqual("0:40");
        });
        it('should zero pad less than 10 minutes', function() {
          return expect(this.parser.from_minutes(7)).toEqual("0:07");
        });
        it('should handle more than an hour', function() {
          return expect(this.parser.from_minutes(90)).toEqual("1:30");
        });
        it('should zero pad between an hour and an hour ten', function() {
          return expect(this.parser.from_minutes(124)).toEqual("2:04");
        });
        it('should handle zero', function() {
          return expect(this.parser.from_minutes(0)).toEqual("0:00");
        });
        it('should go to zero on negative numbers', function() {
          return expect(this.parser.from_minutes(-45)).toEqual("0:00");
        });
        return it('should round on decimals', function() {
          return expect(this.parser.from_minutes(45.2)).toEqual("0:45");
        });
      });
      describe('hm format', function() {
        beforeEach(function() {
          return this.parser = new TimeParser('hm');
        });
        it('should do less than an hour', function() {
          return expect(this.parser.from_minutes(40)).toEqual("0h40m");
        });
        it('should zero pad less than 10 minutes', function() {
          return expect(this.parser.from_minutes(7)).toEqual("0h07m");
        });
        it('should handle more than an hour', function() {
          return expect(this.parser.from_minutes(90)).toEqual("1h30m");
        });
        it('should zero pad between an hour and an hour ten', function() {
          return expect(this.parser.from_minutes(124)).toEqual("2h04m");
        });
        return it('should handle zero', function() {
          return expect(this.parser.from_minutes(0)).toEqual("0h00m");
        });
      });
      describe('h?m format', function() {
        beforeEach(function() {
          return this.parser = new TimeParser('h?m');
        });
        it('should not have hours for less than an hour', function() {
          return expect(this.parser.from_minutes(40)).toEqual("40m");
        });
        it('should have the hours for more than an hour', function() {
          return expect(this.parser.from_minutes(75)).toEqual("1h15m");
        });
        it('zero-pads minutes if more than an hour', function() {
          return expect(this.parser.from_minutes(65)).toEqual("1h05m");
        });
        return it('should not zero-pad the minutes', function() {
          return expect(this.parser.from_minutes(5)).toEqual("5m");
        });
      });
      describe('custom string format', function() {
        beforeEach(function() {
          return this.parser = new TimeParser('r{HOURS}and{MINUTES}om');
        });
        return it('should handle a number', function() {
          return expect(this.parser.from_minutes(90)).toEqual("r1and30om");
        });
      });
      return describe('function format', function() {
        beforeEach(function() {
          var fn;
          fn = function(hours, minutes) {
            var total_minutes;
            total_minutes = hours * 60 + minutes;
            return "" + total_minutes + "m";
          };
          return this.parser = new TimeParser(fn);
        });
        return it('should return the value described by the function', function() {
          return expect(this.parser.from_minutes(90)).toEqual("90m");
        });
      });
    });
    describe('to_minutes', function() {
      it('should handle a number', function() {
        return expect(this.parser.to_minutes(0)).toEqual(0);
      });
      it('should handle a number', function() {
        return expect(this.parser.to_minutes(30)).toEqual(30);
      });
      it('should handle empty string', function() {
        return expect(this.parser.to_minutes("")).toEqual(0);
      });
      describe('just numbers', function() {
        return it('should turn plain numbers into minutes', function() {
          return expect(this.parser.to_minutes("12")).toEqual(12);
        });
      });
      describe('with decimals', function() {
        it('should turn .5 into half an hour', function() {
          return expect(this.parser.to_minutes(".5")).toEqual(30);
        });
        it('should turn 0.5 into half an hour', function() {
          return expect(this.parser.to_minutes("0.5")).toEqual(30);
        });
        it('should turn 1.5 into 90 minutes', function() {
          return expect(this.parser.to_minutes("1.5")).toEqual(90);
        });
        it('should turn 1.25 into hour fifteen', function() {
          return expect(this.parser.to_minutes("1.25")).toEqual(75);
        });
        it('should round 1.33 to 80 minutes', function() {
          return expect(this.parser.to_minutes("1.33")).toEqual(80);
        });
        return it('should discard everything after a second decimal', function() {
          return expect(this.parser.to_minutes('1.2.5')).toEqual(72);
        });
      });
      describe('with colons', function() {
        it('should handle a normal number', function() {
          return expect(this.parser.to_minutes('1:15')).toEqual(75);
        });
        it('should handle nothing in front of the colon', function() {
          return expect(this.parser.to_minutes(':45')).toEqual(45);
        });
        it('should turn 0:4 into four minutes', function() {
          return expect(this.parser.to_minutes('0:4')).toEqual(4);
        });
        it('should turn :4 into four minutes', function() {
          return expect(this.parser.to_minutes(':4')).toEqual(4);
        });
        it('should drop everything after the second colon', function() {
          return expect(this.parser.to_minutes('1:12:32')).toEqual(72);
        });
        it('should carry numbers over 60 in the minute position', function() {
          return expect(this.parser.to_minutes('1:65')).toEqual(125);
        });
        return describe('and decimals', function() {
          it('should drop anything after the decimal if the colon comes first', function() {
            return expect(this.parser.to_minutes('1:23.4')).toEqual(83);
          });
          return it('should convert an hour with decimal and add the minutes', function() {
            return expect(this.parser.to_minutes('1.2:01')).toEqual(73);
          });
        });
      });
      describe('with XhXXm syntax', function() {
        it('should handle a normal value', function() {
          return expect(this.parser.to_minutes('1h15m')).toEqual(75);
        });
        it('should handle just minutes', function() {
          return expect(this.parser.to_minutes('15m')).toEqual(15);
        });
        it('should handle just hours', function() {
          return expect(this.parser.to_minutes('2h')).toEqual(120);
        });
        it('should handle spaces', function() {
          return expect(this.parser.to_minutes('2 h 10 m')).toEqual(130);
        });
        return it('handles large minutes', function() {
          return expect(this.parser.to_minutes('85m')).toEqual(85);
        });
      });
      return describe('bad inputs', function() {
        it('should discard letters', function() {
          return expect(this.parser.to_minutes('abc')).toEqual(0);
        });
        it('should discard letters, but leave the numbers', function() {
          return expect(this.parser.to_minutes('ab2c')).toEqual(2);
        });
        it('should discard letters and leave colons', function() {
          return expect(this.parser.to_minutes('abc')).toEqual(0);
        });
        it('should discard letters and leave colons', function() {
          return expect(this.parser.to_minutes('a2b:c12')).toEqual(132);
        });
        return it('should discard letters and leave decimals', function() {
          return expect(this.parser.to_minutes('2asdf.a5ad')).toEqual(150);
        });
      });
    });
    return describe('setting default format', function() {
      return it('uses the new format for new parsers', function() {
        var parser;
        TimeParser.set_default_format('hm');
        parser = new TimeParser();
        return expect(parser.from_minutes(30)).toEqual('0h30m');
      });
    });
  });

}).call(this);
